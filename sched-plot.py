#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# sched-plot -- Plot a workload schedule
#
# Given a system configuration, a workload description, and a schedule as
# generated by `scorsa-sched', this program generates a plot displaying the
# amount of sockets used by each job over time, as well as submission times
# for each job in the workload.
#
# Copyright Â© 2018 Aaron Call <aaron.callo@bsc.es>

import sys
import logging
import argparse
import json
import copy
import math

import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

logging.basicConfig(format="%(message)s", level=logging.ERROR)

ap = argparse.ArgumentParser()
#ap.add_argument("-l", "--layout", dest="l", required=True,
#                help="Layout ile (json format)")
ap.add_argument("-s", "--schedule", dest="s", required=True,
				help="JSON schedule file")
args = ap.parse_args()

with open(args.s) as s:
	schedule = json.load(s)

lastTime = sorted(schedule, key=lambda k: k['completion'])[-1]["step"]
schedule = sorted(schedule, key=lambda k: k['step'], reverse=False)

loadFactor = []
arrivalsPlot = []
resources = []
labels = []
completions = {}
parsedSched = {}
racks = {}
resourcesUsed = 0
arrivals = 0
arrivalJson = {}
avgCompositionPlot = []
missedDeadlines = []
avgCompSize = 0
arrivalAccPlot = []
departureAccPlot = []
arrivalAccJson = {}
departureAccJson = {}
departureAccPlot = []
arrivalsAcc = 0
departuresAcc = 0
lf = 0
deadlines = 0
interArrivalTimes = 0
previousTime = -1
arrivalsJson = {}
for i in schedule:
        arrivalsJson[i["arrival"][0]] = i
        if i["scheduled"][0] in parsedSched:
            parsedSched[i["scheduled"][0]].append(i)
        else:
            parsedSched[i["scheduled"][0]] = [i]

        if i["arrival"][0] not in arrivalJson:
            arrivalJson[i["arrival"][0]] = 1
        else:
            arrivalJson[i["arrival"][0]] += 1

        if i["arrival"][0] not in arrivalAccJson:
            arrivalAccJson[i["arrival"][0]] = 1
        else:
            arrivalAccJson[i["arrival"][0]] += 1

        if i["completion"] not in departureAccJson:
            departureAccJson[i["completion"]] = 1
        else:
            departureAccJson[i["completion"]] += 1

#        if i["completion"] in arrivalJson:
#            arrivalJson[i["completion"]] -= 1
#        else:
#            arrivalJson[i["completion"]] = -1

for i in range(0, lastTime+1):
#        lf = -1
        if i in completions:
            for p in completions[i]:
                    if p["deadline"][0] < p["completion"]:
                        deadlines += 1
                    for volume in p["volumes"]:
                            racks[p["rackid"][0]][volume] -= 1
                    if racks[p["rackid"][0]][volume] == 0:
                            resourcesUsed-=1
                            del racks[p["rackid"][0]][volume]

        if i in arrivalsJson:
                if previousTime == -1:
                        interArrivalTimes+=i
                        previousTime=i
                else:
                        interArrivalTimes+=(i-previousTime)
                        previousTime=i

	if i in parsedSched:
            for job in parsedSched[i]:
                avgCompSize = job["avgCompositionSize"]
                if job["completion"] in completions:
		    completions[job["completion"]].append(job)
                else:
                    completions[job["completion"]] = [job]

                lf = job["loadFactor"]
		for volume in job["volumes"]:
			if job["rackid"][0] not in racks:
				racks[job["rackid"][0]] = {}

			if volume not in racks[job["rackid"][0]]:
				racks[job["rackid"][0]][volume] = 1
				resourcesUsed+=1
			else:
				racks[job["rackid"][0]][volume]+=1

        if i in arrivalJson:
        #    arrivals+=arrivalJson[i]
            arrivalsPlot.extend([arrivalJson[i]])
        else:
            arrivalsPlot.extend([0])
       
        if i in arrivalAccJson:
            arrivalsAcc+=arrivalAccJson[i]

        if i in departureAccJson:
            departuresAcc+=departureAccJson[i]

	labels.extend([i])
	resources.extend([resourcesUsed])
       # arrivalsPlot.extend([arrivals])
        arrivalAccPlot.extend([arrivalsAcc])
        departureAccPlot.extend([departuresAcc])
        avgCompositionPlot.extend([avgCompSize])
        missedDeadlines.extend([deadlines])

        if lf != -1:
            loadFactor.extend([lf])

print(missedDeadlines[-1])
print(interArrivalTimes/len(schedule))
plt.xlabel("Execution time (s)")
plt.title("NVMe used for job allocation over time")
# plt.xticks(range(0,lastTime),rotation=90)
p1 = plt.plot(labels, resources)
#plt.yticks(np.arange(len(schedule)))
plt.yticks(np.arange(11))
plt.ylabel("NVMe used")
plt.tight_layout()
plt.savefig('plots/nvmeUsed-over-time.pdf', bbox_inches='tight')
plt.clf()
pl = plt.plot(labels, arrivalsPlot)
plt.savefig('plots/arrivals-over-time.pdf', bbox_inches='tight')
plt.clf()
pl = plt.plot(labels, avgCompositionPlot)
plt.savefig('plots/avg-compositionSize-over-time.pdf', bbox_inches='tight')
plt.clf()
pl = plt.plot(labels, loadFactor)
plt.savefig('plots/loadFactor-over-time.pdf', bbox_inches='tight')
plt.clf()
pl = plt.plot(labels, missedDeadlines)
plt.savefig('plots/missedDeadlines-over-time.pdf', bbox_inches='tight')
plt.clf()
pl = plt.plot(labels, arrivalAccPlot)
plt.plot(labels, departureAccPlot)
plt.savefig('plots/accumulatedArrivDepChart.pdf', bbox_inches='tight')
plt.clf()

