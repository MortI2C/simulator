#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# sched-plot -- Plot a workload schedule
#
# Given a system configuration, a workload description, and a schedule as
# generated by `scorsa-sched', this program generates a plot displaying the
# amount of sockets used by each job over time, as well as submission times
# for each job in the workload.
#
# Copyright Â© 2018 Aaron Call <aaron.callo@bsc.es>

import sys
import logging
import argparse
import json
import copy
import math

import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

logging.basicConfig(format="%(message)s", level=logging.ERROR)

ap = argparse.ArgumentParser()
#ap.add_argument("-l", "--layout", dest="l", required=True,
#                help="Layout ile (json format)")
ap.add_argument("-s", "--schedule", dest="s", required=True,
				help="JSON schedule file")
args = ap.parse_args()

with open(args.s) as s:
	schedule = json.load(s)

lastTime = sorted(schedule, key=lambda k: k['completion'])[-1]["step"]
schedule = sorted(schedule, key=lambda k: k['step'], reverse=False)

resources = []
labels = []
completions = {}
resourcesUsed = 0
parsedSched = {}
racks = {}
previousResourcesUsed = -1
for i in schedule:
	parsedSched[i["scheduled"][0]] = i


for i in range(0, lastTime+1):
	if i in completions:
		for volume in completions[i]["volumes"]:
			racks[completions[i]["rackid"][0]][volume] -= 1
		if racks[completions[i]["rackid"][0]][volume] == 0:
			resourcesUsed-=1
			del racks[completions[i]["rackid"][0]][volume]

	if i in parsedSched:
		completions[parsedSched[i]["completion"]] = parsedSched[i]
		for volume in parsedSched[i]["volumes"]:
			if parsedSched[i]["rackid"][0] not in racks:
				racks[parsedSched[i]["rackid"][0]] = {}

			if volume not in racks[parsedSched[i]["rackid"][0]]:
				racks[parsedSched[i]["rackid"][0]][volume] = 1
				resourcesUsed+=1
			else:
				racks[parsedSched[i]["rackid"][0]][volume]+=1

	if previousResourcesUsed != resourcesUsed:
		labels.extend([i])
		resources.extend([resourcesUsed])
		previousResourcesUsed = resourcesUsed

plt.xlabel("Execution time (s)")
plt.title("NVMe used for job allocation over time")
# plt.xticks(range(0,lastTime),rotation=90)
p1 = plt.plot(labels, resources)
plt.yticks(np.arange(11))
plt.ylabel("NVMe used")
plt.tight_layout()
plt.savefig('plot.pdf', bbox_inches='tight')

